#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EICSystemTracker.Data.EICData.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EICData")]
	public partial class SQLEICDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFaction(Faction instance);
    partial void UpdateFaction(Faction instance);
    partial void DeleteFaction(Faction instance);
    partial void InsertTrack_SystemFaction(Track_SystemFaction instance);
    partial void UpdateTrack_SystemFaction(Track_SystemFaction instance);
    partial void DeleteTrack_SystemFaction(Track_SystemFaction instance);
    partial void InsertSystem(System instance);
    partial void UpdateSystem(System instance);
    partial void DeleteSystem(System instance);
    partial void InsertTrack_Faction(Track_Faction instance);
    partial void UpdateTrack_Faction(Track_Faction instance);
    partial void DeleteTrack_Faction(Track_Faction instance);
    partial void InsertTrack_System(Track_System instance);
    partial void UpdateTrack_System(Track_System instance);
    partial void DeleteTrack_System(Track_System instance);
    #endregion
		
		public SQLEICDataDataContext() : 
				base(global::EICSystemTracker.Data.Properties.Settings.Default.EICDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLEICDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLEICDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLEICDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLEICDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Faction> Factions
		{
			get
			{
				return this.GetTable<Faction>();
			}
		}
		
		public System.Data.Linq.Table<Track_SystemFaction> Track_SystemFactions
		{
			get
			{
				return this.GetTable<Track_SystemFaction>();
			}
		}
		
		public System.Data.Linq.Table<System> Systems
		{
			get
			{
				return this.GetTable<System>();
			}
		}
		
		public System.Data.Linq.Table<Track_Faction> Track_Factions
		{
			get
			{
				return this.GetTable<Track_Faction>();
			}
		}
		
		public System.Data.Linq.Table<Track_System> Track_Systems
		{
			get
			{
				return this.GetTable<Track_System>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faction")]
	public partial class Faction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Track_SystemFaction> _Track_SystemFactions;
		
		private EntitySet<Track_Faction> _Track_Factions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Faction()
		{
			this._Track_SystemFactions = new EntitySet<Track_SystemFaction>(new Action<Track_SystemFaction>(this.attach_Track_SystemFactions), new Action<Track_SystemFaction>(this.detach_Track_SystemFactions));
			this._Track_Factions = new EntitySet<Track_Faction>(new Action<Track_Faction>(this.attach_Track_Factions), new Action<Track_Faction>(this.detach_Track_Factions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Track_SystemFaction", Storage="_Track_SystemFactions", ThisKey="Id", OtherKey="Faction")]
		public EntitySet<Track_SystemFaction> Track_SystemFactions
		{
			get
			{
				return this._Track_SystemFactions;
			}
			set
			{
				this._Track_SystemFactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Track_Faction", Storage="_Track_Factions", ThisKey="Id", OtherKey="Faction")]
		public EntitySet<Track_Faction> Track_Factions
		{
			get
			{
				return this._Track_Factions;
			}
			set
			{
				this._Track_Factions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Track_SystemFactions(Track_SystemFaction entity)
		{
			this.SendPropertyChanging();
			entity.Faction1 = this;
		}
		
		private void detach_Track_SystemFactions(Track_SystemFaction entity)
		{
			this.SendPropertyChanging();
			entity.Faction1 = null;
		}
		
		private void attach_Track_Factions(Track_Faction entity)
		{
			this.SendPropertyChanging();
			entity.Faction1 = this;
		}
		
		private void detach_Track_Factions(Track_Faction entity)
		{
			this.SendPropertyChanging();
			entity.Faction1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Track_SystemFaction")]
	public partial class Track_SystemFaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _System;
		
		private int _Faction;
		
		private System.Nullable<decimal> _Influence;
		
		private string _CurrentState;
		
		private string _PendingState;
		
		private string _RecoveringState;
		
		private System.DateTime _Timestamp;
		
		private string _UpdateBy;
		
		private EntityRef<Faction> _Faction1;
		
		private EntityRef<System> _System1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSystemChanging(int value);
    partial void OnSystemChanged();
    partial void OnFactionChanging(int value);
    partial void OnFactionChanged();
    partial void OnInfluenceChanging(System.Nullable<decimal> value);
    partial void OnInfluenceChanged();
    partial void OnCurrentStateChanging(string value);
    partial void OnCurrentStateChanged();
    partial void OnPendingStateChanging(string value);
    partial void OnPendingStateChanged();
    partial void OnRecoveringStateChanging(string value);
    partial void OnRecoveringStateChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnUpdateByChanging(string value);
    partial void OnUpdateByChanged();
    #endregion
		
		public Track_SystemFaction()
		{
			this._Faction1 = default(EntityRef<Faction>);
			this._System1 = default(EntityRef<System>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_System", DbType="Int NOT NULL")]
		public int System
		{
			get
			{
				return this._System;
			}
			set
			{
				if ((this._System != value))
				{
					if (this._System1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemChanging(value);
					this.SendPropertyChanging();
					this._System = value;
					this.SendPropertyChanged("System");
					this.OnSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Faction", DbType="Int NOT NULL")]
		public int Faction
		{
			get
			{
				return this._Faction;
			}
			set
			{
				if ((this._Faction != value))
				{
					if (this._Faction1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactionChanging(value);
					this.SendPropertyChanging();
					this._Faction = value;
					this.SendPropertyChanged("Faction");
					this.OnFactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Influence", DbType="Decimal(3,1)")]
		public System.Nullable<decimal> Influence
		{
			get
			{
				return this._Influence;
			}
			set
			{
				if ((this._Influence != value))
				{
					this.OnInfluenceChanging(value);
					this.SendPropertyChanging();
					this._Influence = value;
					this.SendPropertyChanged("Influence");
					this.OnInfluenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentState", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string CurrentState
		{
			get
			{
				return this._CurrentState;
			}
			set
			{
				if ((this._CurrentState != value))
				{
					this.OnCurrentStateChanging(value);
					this.SendPropertyChanging();
					this._CurrentState = value;
					this.SendPropertyChanged("CurrentState");
					this.OnCurrentStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PendingState", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PendingState
		{
			get
			{
				return this._PendingState;
			}
			set
			{
				if ((this._PendingState != value))
				{
					this.OnPendingStateChanging(value);
					this.SendPropertyChanging();
					this._PendingState = value;
					this.SendPropertyChanged("PendingState");
					this.OnPendingStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoveringState", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RecoveringState
		{
			get
			{
				return this._RecoveringState;
			}
			set
			{
				if ((this._RecoveringState != value))
				{
					this.OnRecoveringStateChanging(value);
					this.SendPropertyChanging();
					this._RecoveringState = value;
					this.SendPropertyChanged("RecoveringState");
					this.OnRecoveringStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateBy", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UpdateBy
		{
			get
			{
				return this._UpdateBy;
			}
			set
			{
				if ((this._UpdateBy != value))
				{
					this.OnUpdateByChanging(value);
					this.SendPropertyChanging();
					this._UpdateBy = value;
					this.SendPropertyChanged("UpdateBy");
					this.OnUpdateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Track_SystemFaction", Storage="_Faction1", ThisKey="Faction", OtherKey="Id", IsForeignKey=true)]
		public Faction Faction1
		{
			get
			{
				return this._Faction1.Entity;
			}
			set
			{
				Faction previousValue = this._Faction1.Entity;
				if (((previousValue != value) 
							|| (this._Faction1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faction1.Entity = null;
						previousValue.Track_SystemFactions.Remove(this);
					}
					this._Faction1.Entity = value;
					if ((value != null))
					{
						value.Track_SystemFactions.Add(this);
						this._Faction = value.Id;
					}
					else
					{
						this._Faction = default(int);
					}
					this.SendPropertyChanged("Faction1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Track_SystemFaction", Storage="_System1", ThisKey="System", OtherKey="Id", IsForeignKey=true)]
		public System System1
		{
			get
			{
				return this._System1.Entity;
			}
			set
			{
				System previousValue = this._System1.Entity;
				if (((previousValue != value) 
							|| (this._System1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System1.Entity = null;
						previousValue.Track_SystemFactions.Remove(this);
					}
					this._System1.Entity = value;
					if ((value != null))
					{
						value.Track_SystemFactions.Add(this);
						this._System = value.Id;
					}
					else
					{
						this._System = default(int);
					}
					this.SendPropertyChanged("System1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.System")]
	public partial class System : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Track_SystemFaction> _Track_SystemFactions;
		
		private EntitySet<Track_System> _Track_Systems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public System()
		{
			this._Track_SystemFactions = new EntitySet<Track_SystemFaction>(new Action<Track_SystemFaction>(this.attach_Track_SystemFactions), new Action<Track_SystemFaction>(this.detach_Track_SystemFactions));
			this._Track_Systems = new EntitySet<Track_System>(new Action<Track_System>(this.attach_Track_Systems), new Action<Track_System>(this.detach_Track_Systems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Track_SystemFaction", Storage="_Track_SystemFactions", ThisKey="Id", OtherKey="System")]
		public EntitySet<Track_SystemFaction> Track_SystemFactions
		{
			get
			{
				return this._Track_SystemFactions;
			}
			set
			{
				this._Track_SystemFactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Track_System", Storage="_Track_Systems", ThisKey="Id", OtherKey="System")]
		public EntitySet<Track_System> Track_Systems
		{
			get
			{
				return this._Track_Systems;
			}
			set
			{
				this._Track_Systems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Track_SystemFactions(Track_SystemFaction entity)
		{
			this.SendPropertyChanging();
			entity.System1 = this;
		}
		
		private void detach_Track_SystemFactions(Track_SystemFaction entity)
		{
			this.SendPropertyChanging();
			entity.System1 = null;
		}
		
		private void attach_Track_Systems(Track_System entity)
		{
			this.SendPropertyChanging();
			entity.System1 = this;
		}
		
		private void detach_Track_Systems(Track_System entity)
		{
			this.SendPropertyChanging();
			entity.System1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Track_Faction")]
	public partial class Track_Faction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Faction;
		
		private string _Allegiance;
		
		private System.DateTime _Timestamp;
		
		private string _UpdateBy;
		
		private EntityRef<Faction> _Faction1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFactionChanging(int value);
    partial void OnFactionChanged();
    partial void OnAllegianceChanging(string value);
    partial void OnAllegianceChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnUpdateByChanging(string value);
    partial void OnUpdateByChanged();
    #endregion
		
		public Track_Faction()
		{
			this._Faction1 = default(EntityRef<Faction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Faction", DbType="Int NOT NULL")]
		public int Faction
		{
			get
			{
				return this._Faction;
			}
			set
			{
				if ((this._Faction != value))
				{
					if (this._Faction1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactionChanging(value);
					this.SendPropertyChanging();
					this._Faction = value;
					this.SendPropertyChanged("Faction");
					this.OnFactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allegiance", DbType="VarChar(50)")]
		public string Allegiance
		{
			get
			{
				return this._Allegiance;
			}
			set
			{
				if ((this._Allegiance != value))
				{
					this.OnAllegianceChanging(value);
					this.SendPropertyChanging();
					this._Allegiance = value;
					this.SendPropertyChanged("Allegiance");
					this.OnAllegianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateBy", DbType="NVarChar(255)")]
		public string UpdateBy
		{
			get
			{
				return this._UpdateBy;
			}
			set
			{
				if ((this._UpdateBy != value))
				{
					this.OnUpdateByChanging(value);
					this.SendPropertyChanging();
					this._UpdateBy = value;
					this.SendPropertyChanged("UpdateBy");
					this.OnUpdateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faction_Track_Faction", Storage="_Faction1", ThisKey="Faction", OtherKey="Id", IsForeignKey=true)]
		public Faction Faction1
		{
			get
			{
				return this._Faction1.Entity;
			}
			set
			{
				Faction previousValue = this._Faction1.Entity;
				if (((previousValue != value) 
							|| (this._Faction1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faction1.Entity = null;
						previousValue.Track_Factions.Remove(this);
					}
					this._Faction1.Entity = value;
					if ((value != null))
					{
						value.Track_Factions.Add(this);
						this._Faction = value.Id;
					}
					else
					{
						this._Faction = default(int);
					}
					this.SendPropertyChanged("Faction1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Track_System")]
	public partial class Track_System : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _System;
		
		private System.Nullable<int> _ControllingFaction;
		
		private System.Nullable<int> _Traffic;
		
		private System.Nullable<int> _Population;
		
		private string _Government;
		
		private string _Allegiance;
		
		private string _State;
		
		private string _Security;
		
		private string _Economy;
		
		private string _ControllingPower;
		
		private string _ControllingPowerState;
		
		private bool _NeedPermit;
		
		private System.DateTime _Timestamp;
		
		private string _UpdateBy;
		
		private EntityRef<System> _System1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSystemChanging(int value);
    partial void OnSystemChanged();
    partial void OnControllingFactionChanging(System.Nullable<int> value);
    partial void OnControllingFactionChanged();
    partial void OnTrafficChanging(System.Nullable<int> value);
    partial void OnTrafficChanged();
    partial void OnPopulationChanging(System.Nullable<int> value);
    partial void OnPopulationChanged();
    partial void OnGovernmentChanging(string value);
    partial void OnGovernmentChanged();
    partial void OnAllegianceChanging(string value);
    partial void OnAllegianceChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnSecurityChanging(string value);
    partial void OnSecurityChanged();
    partial void OnEconomyChanging(string value);
    partial void OnEconomyChanged();
    partial void OnControllingPowerChanging(string value);
    partial void OnControllingPowerChanged();
    partial void OnControllingPowerStateChanging(string value);
    partial void OnControllingPowerStateChanged();
    partial void OnNeedPermitChanging(bool value);
    partial void OnNeedPermitChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnUpdateByChanging(string value);
    partial void OnUpdateByChanged();
    #endregion
		
		public Track_System()
		{
			this._System1 = default(EntityRef<System>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_System", DbType="Int NOT NULL")]
		public int System
		{
			get
			{
				return this._System;
			}
			set
			{
				if ((this._System != value))
				{
					if (this._System1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemChanging(value);
					this.SendPropertyChanging();
					this._System = value;
					this.SendPropertyChanged("System");
					this.OnSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControllingFaction", DbType="Int")]
		public System.Nullable<int> ControllingFaction
		{
			get
			{
				return this._ControllingFaction;
			}
			set
			{
				if ((this._ControllingFaction != value))
				{
					this.OnControllingFactionChanging(value);
					this.SendPropertyChanging();
					this._ControllingFaction = value;
					this.SendPropertyChanged("ControllingFaction");
					this.OnControllingFactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Traffic", DbType="Int")]
		public System.Nullable<int> Traffic
		{
			get
			{
				return this._Traffic;
			}
			set
			{
				if ((this._Traffic != value))
				{
					this.OnTrafficChanging(value);
					this.SendPropertyChanging();
					this._Traffic = value;
					this.SendPropertyChanged("Traffic");
					this.OnTrafficChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Population", DbType="Int")]
		public System.Nullable<int> Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Government", DbType="NVarChar(75)")]
		public string Government
		{
			get
			{
				return this._Government;
			}
			set
			{
				if ((this._Government != value))
				{
					this.OnGovernmentChanging(value);
					this.SendPropertyChanging();
					this._Government = value;
					this.SendPropertyChanged("Government");
					this.OnGovernmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allegiance", DbType="NVarChar(75)")]
		public string Allegiance
		{
			get
			{
				return this._Allegiance;
			}
			set
			{
				if ((this._Allegiance != value))
				{
					this.OnAllegianceChanging(value);
					this.SendPropertyChanging();
					this._Allegiance = value;
					this.SendPropertyChanged("Allegiance");
					this.OnAllegianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(45)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security", DbType="NVarChar(10)")]
		public string Security
		{
			get
			{
				return this._Security;
			}
			set
			{
				if ((this._Security != value))
				{
					this.OnSecurityChanging(value);
					this.SendPropertyChanging();
					this._Security = value;
					this.SendPropertyChanged("Security");
					this.OnSecurityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Economy", DbType="NVarChar(75)")]
		public string Economy
		{
			get
			{
				return this._Economy;
			}
			set
			{
				if ((this._Economy != value))
				{
					this.OnEconomyChanging(value);
					this.SendPropertyChanging();
					this._Economy = value;
					this.SendPropertyChanged("Economy");
					this.OnEconomyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControllingPower", DbType="NVarChar(255)")]
		public string ControllingPower
		{
			get
			{
				return this._ControllingPower;
			}
			set
			{
				if ((this._ControllingPower != value))
				{
					this.OnControllingPowerChanging(value);
					this.SendPropertyChanging();
					this._ControllingPower = value;
					this.SendPropertyChanged("ControllingPower");
					this.OnControllingPowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControllingPowerState", DbType="NVarChar(45)")]
		public string ControllingPowerState
		{
			get
			{
				return this._ControllingPowerState;
			}
			set
			{
				if ((this._ControllingPowerState != value))
				{
					this.OnControllingPowerStateChanging(value);
					this.SendPropertyChanging();
					this._ControllingPowerState = value;
					this.SendPropertyChanged("ControllingPowerState");
					this.OnControllingPowerStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedPermit", DbType="Bit NOT NULL")]
		public bool NeedPermit
		{
			get
			{
				return this._NeedPermit;
			}
			set
			{
				if ((this._NeedPermit != value))
				{
					this.OnNeedPermitChanging(value);
					this.SendPropertyChanging();
					this._NeedPermit = value;
					this.SendPropertyChanged("NeedPermit");
					this.OnNeedPermitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateBy", DbType="NVarChar(255)")]
		public string UpdateBy
		{
			get
			{
				return this._UpdateBy;
			}
			set
			{
				if ((this._UpdateBy != value))
				{
					this.OnUpdateByChanging(value);
					this.SendPropertyChanging();
					this._UpdateBy = value;
					this.SendPropertyChanged("UpdateBy");
					this.OnUpdateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="System_Track_System", Storage="_System1", ThisKey="System", OtherKey="Id", IsForeignKey=true)]
		public System System1
		{
			get
			{
				return this._System1.Entity;
			}
			set
			{
				System previousValue = this._System1.Entity;
				if (((previousValue != value) 
							|| (this._System1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._System1.Entity = null;
						previousValue.Track_Systems.Remove(this);
					}
					this._System1.Entity = value;
					if ((value != null))
					{
						value.Track_Systems.Add(this);
						this._System = value.Id;
					}
					else
					{
						this._System = default(int);
					}
					this.SendPropertyChanged("System1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
